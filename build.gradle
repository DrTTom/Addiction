buildscript {
   repositories {
      jcenter()
   }
}

plugins {
  // using out-dated plugin because current one uses wrong auxclasspath in task spotbugsTest: 
  id 'com.github.spotbugs' version '3.0.0'
  id 'com.github.ben-manes.versions' version '0.28.0'
  // id 'net.ltgt.errorprone' version '0.0.13'  //lots of false positives, contradicts PMD rules
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'maven-publish'
}

pmd {
    toolVersion = '6.22.0'
    ruleSets = []
    ruleSetConfig = resources.text.fromFile("pmd_config.xml")
}

repositories {
   mavenCentral()
}

version = '0.3'
group = 'de.tautenhahn.dependencies'

check.dependsOn jacocoTestReport

configurations {
   forCore
   forTest
   compile.extendsFrom forCore 
}

dependencies {
   implementation ('com.sparkjava:spark-core:2.9.1')
   {
      exclude module: "websocket-client"
      exclude module: "jetty-webapp"
      exclude module: "jetty-xml"
   }
   implementation 'com.google.code.gson:gson:2.8.6'
   runtimeOnly 'org.slf4j:slf4j-simple:1.8.0-beta4'
   
   testImplementation 'org.slf4j:slf4j-simple:1.8.0-beta4' // there is a security warning for all earlier versions
   testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
   testImplementation 'org.assertj:assertj-core:3.15.0'
   
   testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

   forCore 'org.slf4j:slf4j-api:1.8.0-beta2'
}



mainClassName = 'de.tautenhahn.dependencies.Main'
applicationDefaultJvmArgs = ['-Dorg.slf4j.simpleLogger.logFile=GordianKnotServer.log']

test{
   useJUnitPlatform()
}

jar {
   archiveBaseName = "${project.name}Core"
   exclude '**/rest/*'
   exclude '**/Main.class'
   includeEmptyDirs = false
}

task jarServer(type:Jar) {
   classifier = 'server'
   from (sourceSets.main.output) {
      include '**/rest/**/*'
      include '**/Main.class'
   }
   includeEmptyDirs = false
}

task jarTest(type:Jar) {
   archiveBaseName = "${project.name}Test"
   from (sourceSets.test.output)
   {
      include '**/commontests/*'
   }
   includeEmptyDirs = false
}

distZip {
   from (jarServer)
   {
      into "${project.name}-${project.version}/lib"
   }
}

distTar {
   from (jarServer)
   {
      into "${project.name}-${project.version}/lib"
   }
}

tasks.withType(CreateStartScripts) {
   classpath= files(jarServer) +classpath
}

assemble.dependsOn jarServer
assemble.dependsOn jarTest

run {
   args = [sourceSets.test.runtimeClasspath.asPath, 'GordianKnot']
}

publishing {
   def createDependencyNodes = { Configuration conf, Node pom ->
      def dependencyNode = pom.appendNode('dependencies')
      conf.allDependencies.each { 
         def dep = dependencyNode.appendNode('dependency')
         dep.appendNode('groupId', it.group)
         dep.appendNode('artifactId', it.name)
         dep.appendNode('version', it.version)
      }
   }
   publications {
      GordianKnotCore(MavenPublication) {
         artifactId = 'GordianKnotCore'
         setArtifacts([jar])
         pom.withXml {
            createDependencyNodes(configurations.forCore, asNode())
         }
      }
      GordianKnotTest(MavenPublication) {
         artifactId = 'GordianKnotTest'
         setArtifacts([jarTest]) 
         pom.withXml {
            createDependencyNodes(configurations.forCore, asNode())
            def dependencyNode = asNode().get('dependencies')[0]
            def dep = dependencyNode.appendNode('dependency')
            dep.appendNode('groupId', project.group)
            dep.appendNode('artifactId', 'GordianKnotCore')
            dep.appendNode('version', project.version)
         }
      }
   }
}

spotbugs {
   toolVersion = "4.0.1"
   effort = "max"
   reportLevel = "low"
   excludeFilter = file("findbugs-exclude.xml")
}